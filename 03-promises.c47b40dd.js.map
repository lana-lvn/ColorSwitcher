{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,UAAWL,SAASC,cAAc,0BAqCpC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAG3BC,aAAY,WACYC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA7CPV,EAAKC,KAAKgB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAIC,iBAEJ,IAAIC,EAAQC,OAAOrB,EAAKI,WAAWkB,OAC/BC,EAAOF,OAAOrB,EAAKK,UAAUiB,OAC7BE,EAASH,OAAOrB,EAAKM,YAAYgB,OAItC,GAAIF,GAAS,GAAKG,EAAO,GAAKC,EAAS,EACrC,OAKD,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAGlCjB,EAFaiB,EAEWL,GAAOM,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAC7CZ,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAC5DqB,OAAM,SAAAJ,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACpBZ,EAAA8B,OAAOI,QAAQ,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAE5DU,GAASG,EAGXvB,EAAKC,KAAKgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) { \n  evt.preventDefault();\n\n  let delay = Number(refs.delayInput.value);\n  let step = Number(refs.stepInput.value);\n  let amount = Number(refs.amountInput.value);\n  let position = 0;\n\n\n if (delay <= 0 && step < 0 && amount < 0) {\n   return;\n  };\n\n\n\n  for (let i = 1; i <= amount; i += 1) { \n    position = i;\n    \n  createPromise(position, delay).then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n    }).catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n    });\n    delay += step;\n  };\n\n  refs.form.reset();\n\n\n};\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    \n    \n    setInterval(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n    \n  });\n};\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setInterval","Math","random","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.c47b40dd.js.map"}